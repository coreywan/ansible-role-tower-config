- name: "config.organization.credential_type: Ensure state of credential_type: [ {{ ansible_tower_config_organization_credential_type.name }} ]"
  vars:
    url_host: "https://{{ ansible_tower_config.host }}"
    url_api: "/api/v2/credential_types/"
    user: "{{ ansible_tower_config.username }}"
    password: "{{ ansible_tower_config.password }}"
    validate_certs: "{{ ansible_tower_config.verify_ssl|bool }}"
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
    body:
      name: "{{ ansible_tower_config_organization_credential_type.name | mandatory }}"
      description: "{{ ansible_tower_config_organization_credential_type.name | default('') }}"
      kind: "{{ ansible_tower_config_organization_credential_type.kind | default('cloud') }}"
      inputs: {{ ansible_tower_config_organization_credential_type.inputs | mandatory }}
      injectors: {{ ansible_tower_config_organization_credential_type.injectors | mandatory }}
    body_format: "{{ ansible_tower_config.format }}"

  block:
    - when: "ansible_tower_config_organization_credential_type.state|default('present') == 'present'"
      block:
        - uri:
            method: GET
            url: "{{ url_host }}{{ url_api }}{{ ansible_tower_config_organization_credential_type.name }}+{{ ansible_tower_config_organization_credential_type.kind | default('cloud') }}"
            user: "{{ user }}"
            password: "{{ password }}"
            validate_certs: "{{ validate_certs }}"
            headers: "{{ headers }}"
            body_format: "{{ body_format }}"
          register: reg_credential_type

      rescue:
        - uri:
            method: POST
            url: "{{ url_host }}{{ url_api }}"
            user: "{{ user }}"
            password: "{{ password }}"
            validate_certs: "{{ validate_certs }}"
            headers: "{{ headers }}"
            body_format: "{{ body_format }}"
          register: reg_credential_type

      always:
        - uri:
            method: PATCH
            url: "https://{{ ansible_tower_config.host }}/{{ reg_credential_type.json.url }}"
            user: "{{ ansible_tower_config.username }}"
            password: "{{ ansible_tower_config.password }}"
            validate_certs: "{{ ansible_tower_config.verify_ssl|bool }}"
            headers: "{{ headers }}"
            body: "{{ body }}"
            body_format: "{{ ansible_tower_config.format }}"
          register: reg_credential_type
    - when: "ansible_tower_config_organization_credential_type.state|default('present') == 'absent'"
      block:
        - uri:
            method: GET
            url: "{{ url_host }}{{ url_api }}{{ ansible_tower_config_organization_credential_type.name }}+{{ ansible_tower_config_organization_credential_type.kind | default('cloud') }}"
            user: "{{ user }}"
            password: "{{ password }}"
            validate_certs: "{{ validate_certs }}"
            headers: "{{ headers }}"
            body_format: "{{ body_format }}"
          register: reg_credential_type

      rescue:
        - uri:
            method: POST
            url: "{{ url_host }}{{ url_api }}"
            user: "{{ user }}"
            password: "{{ password }}"
            validate_certs: "{{ validate_certs }}"
            headers: "{{ headers }}"
            body_format: "{{ body_format }}"
          register: reg_credential_type

      always:
        - uri:
            method: PATCH
            url: "https://{{ ansible_tower_config.host }}/{{ reg_credential_type.json.url }}"
            user: "{{ ansible_tower_config.username }}"
            password: "{{ ansible_tower_config.password }}"
            validate_certs: "{{ ansible_tower_config.verify_ssl|bool }}"
            headers: "{{ headers }}"
            body: "{{ body }}"
            body_format: "{{ ansible_tower_config.format }}"
          register: reg_credential_type
