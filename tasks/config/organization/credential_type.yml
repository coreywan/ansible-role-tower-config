---
- name: "config.organization.credential_type: [ {{ tower_config_organization_credential_type.name }} ]"
  vars:
    url_host: "https://{{ tower_config.host }}"
    url_api: "/api/v2/credential_types/"
    user: "{{ tower_config.username }}"
    password: "{{ tower_config.password }}"
    validate_certs: "{{ tower_config.verify_ssl | default(omit) }}"
    force_basic_auth: true
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
    body:
      name: "{{ tower_config_organization_credential_type.name | mandatory }}"
      description: "{{ tower_config_organization_credential_type.name | default('') }}"
      kind: "{{ tower_config_organization_credential_type.kind | default('cloud') }}"
      inputs: "{{ tower_config_organization_credential_type.inputs | mandatory }}"
      injectors: "{{ tower_config_organization_credential_type.injectors | mandatory }}"
    body_format: "{{ tower_config.format }}"

  block:
    - when: "tower_config_organization_credential_type.state|default('present') == 'present'"
      block:
        - vars:
            a: "{{ url_host }}"
            b: "{{ url_api }}"
            c: "{{ tower_config_organization_credential_type.name }}"
            d: "{{ tower_config_organization_credential_type.kind | default('cloud') }}"
          uri:
            method: GET
            url: "{{ a }}{{ b }}{{ c }}+{{ d }}"
            user: "{{ user }}"
            password: "{{ password }}"
            validate_certs: "{{ validate_certs }}"
            force_basic_auth: true
            headers: "{{ headers }}"
            body_format: "{{ body_format }}"
          register: reg_credential_type

      rescue:
        - uri:
            method: POST
            url: "{{ url_host }}{{ url_api }}"
            user: "{{ user }}"
            password: "{{ password }}"
            validate_certs: "{{ validate_certs }}"
            force_basic_auth: true
            headers: "{{ headers }}"
            body_format: "{{ body_format }}"
          register: reg_credential_type

      always:
        - uri:
            method: PATCH
            url: "https://{{ tower_config.host }}/{{ reg_credential_type.json.url }}"
            user: "{{ tower_config.username }}"
            password: "{{ tower_config.password }}"
            validate_certs: "{{ tower_config.verify_ssl|bool }}"
            force_basic_auth: true
            headers: "{{ headers }}"
            body: "{{ body }}"
            body_format: "{{ tower_config.format }}"
          register: reg_credential_type
    - when: "tower_config_organization_credential_type.state|default('present') == 'absent'"
      block:
        - vars:
            a: "{{ url_host }}"
            b: "{{ url_api }}"
            c: "{{ tower_config_organization_credential_type.name }}"
            d: "{{ tower_config_organization_credential_type.kind | default('cloud') }}"
          uri:
            method: GET
            url: "{{ a }}{{ b }}{{ c }}+{{ d }}"
            user: "{{ user }}"
            password: "{{ password }}"
            validate_certs: "{{ validate_certs }}"
            force_basic_auth: true
            headers: "{{ headers }}"
            body_format: "{{ body_format }}"
          register: reg_credential_type

      rescue:
        - uri:
            method: POST
            url: "{{ url_host }}{{ url_api }}"
            user: "{{ user }}"
            password: "{{ password }}"
            validate_certs: "{{ validate_certs }}"
            force_basic_auth: true
            headers: "{{ headers }}"
            body_format: "{{ body_format }}"
          register: reg_credential_type

      always:
        - uri:
            method: PATCH
            url: "https://{{ tower_config.host }}/{{ reg_credential_type.json.url }}"
            user: "{{ tower_config.username }}"
            password: "{{ tower_config.password }}"
            validate_certs: "{{ tower_config.verify_ssl|bool }}"
            force_basic_auth: true
            headers: "{{ headers }}"
            body: "{{ body }}"
            body_format: "{{ tower_config.format }}"
          register: reg_credential_type
